// Copyright 2019 asana Author. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package context

import (
	"bytes"
	"compress/gzip"
	"errors"
	"io"
	"io/ioutil"
	"net"
	"net/http"
	"net/url"
	"reflect"
	"strconv"
	"strings"
	"sync"

	"github.com/andybalholm/brotli"
	"github.com/beego/i18n"
	"github.com/goasana/asana/session"
)

var maxParam = 50

// Request methods of req
type Request interface {
	Header(head string) string
	GetLanguage(def ...string) string
	Reset(ctx *Context)
	Protocol() string
	URI() string
	URL() string
	Site() string
	Scheme() string
	Domain() string
	Host() string
	Method() string
	Is(method string) bool
	IsGet() bool
	IsPost() bool
	IsHead() bool
	IsOptions() bool
	IsPut() bool
	IsDelete() bool
	IsPatch() bool
	IsAjax() bool
	IsSecure() bool
	IsWebsocket() bool
	IsUpload() bool
	Accepts(contentTypes ...string) bool
	AcceptsHTML() bool
	AcceptsMSGPack() bool
	AcceptsTextPlain() bool
	AcceptsXML() bool
	AcceptsJSON() bool
	AcceptsJSONP() bool
	AcceptsYAML() bool
	AcceptsProtoBuf() bool
	IP() string
	Proxy() []string
	Referer() string
	Refer() string
	SubDomains() string
	Port() int
	UserAgent() string
	ParamsLen() int
	Param(key string) string
	Params() map[string]string
	SetParam(key, val string)
	ResetParams() Request
	Cookie(key string) string
	CopyBody(MaxMemory int64) []byte
	Data() map[interface{}]interface{}
	Query(key string) string
	GetFlash(key interface{}) interface{}
	SetFlash(key, val interface{})
	ParseFormOrMultiForm(maxMemory int64) error
	BindForm(dest interface{}, key string) error
}

// AsanaRequest operates the http request header, data, cookie and body.
// it also contains router params and current session.
type AsanaRequest struct {
	HTTPRequest   *http.Request
	Context       *Context
	CruSession    session.Store
	pNames        []string
	pValues       []string
	data          map[interface{}]interface{} // store some values in this context when calling context in filter or controller.
	dataLock      sync.RWMutex
	RequestBody   []byte
	RunMethod     string
	RunController reflect.Type
}

var _ Request = (*AsanaRequest)(nil)

// NewRequest return AsanaRequest generated by Context.
func NewRequest() *AsanaRequest {
	return &AsanaRequest{
		pNames:  make([]string, 0, maxParam),
		pValues: make([]string, 0, maxParam),
		data:    make(map[interface{}]interface{}),
	}
}

// GetJWT get token
func (req *AsanaRequest) GetJWT() (string, error) {
	authHeader := req.Header(HeaderAuthorization)
	authHeaderParts := strings.Fields(authHeader)
	if len(authHeaderParts) != 2 || !isJWTHeader(authHeaderParts[0]) {
		return "", errors.New("authorization header format must be Bearer|JWT|Token {token}")
	}

	return authHeaderParts[1], nil
}

func isJWTHeader(header string) bool {
	for _, v := range strings.Fields("bearer jwt token") {
		if strings.EqualFold(header, v) {
			return true
		}
	}
	return false
}

// GetLanguage get the language accepted
func (req *AsanaRequest) GetLanguage(def ...string) string {
	al := req.Header(HeaderAcceptLanguage)

	var lang string
	if len(def) > 0 {
		lang = def[0]
	}

	if len(al) > 0 {
		if len(al) > 4 {
			if i18n.IsExist(al[:5]) {
				lang = al[:5]
			} else if i18n.IsExist(al[:2]) {
				lang = al[:2]
			}
		}
	}

	return lang
}

// Reset init the AsanaRequest
func (req *AsanaRequest) Reset(ctx *Context) {
	req.Context = ctx
	req.CruSession = nil
	req.pNames = req.pNames[:0]
	req.pValues = req.pValues[:0]
	req.setData(nil)
	req.RequestBody = []byte{}
}

// Protocol returns request protocol name, such as HTTP/1.1 .
func (req *AsanaRequest) Protocol() string {
	return req.Context.HTTPRequest.Proto
}

// URI returns full request url with query string, fragment.
func (req *AsanaRequest) URI() string {
	return req.Context.HTTPRequest.RequestURI
}

// URL returns request url path (without query string, fragment).
func (req *AsanaRequest) URL() string {
	return req.Context.HTTPRequest.URL.EscapedPath()
}

// Site returns base site url as scheme://domain type.
func (req *AsanaRequest) Site() string {
	return req.Scheme() + "://" + req.Domain()
}

// Scheme returns request scheme as "http" or "https".
func (req *AsanaRequest) Scheme() string {
	if scheme := req.Header(HeaderXForwardedProto); scheme != "" {
		return scheme
	}
	if req.Context.HTTPRequest.URL.Scheme != "" {
		return req.Context.HTTPRequest.URL.Scheme
	}
	if req.Context.HTTPRequest.TLS == nil {
		return "http"
	}
	return "https"
}

// Domain returns host name.
// Alias of Host method.
func (req *AsanaRequest) Domain() string {
	return req.Host()
}

// Host returns host name.
// if no host info in request, return localhost.
func (req *AsanaRequest) Host() string {
	if req.Context.HTTPRequest.Host != "" {
		if hostPart, _, err := net.SplitHostPort(req.Context.HTTPRequest.Host); err == nil {
			return hostPart
		}
		return req.Context.HTTPRequest.Host
	}
	return "localhost"
}

// Method returns http request method.
func (req *AsanaRequest) Method() string {
	return req.Context.HTTPRequest.Method
}

// Is returns boolean of this request is on given method, such as Is("POST").
func (req *AsanaRequest) Is(method string) bool {
	return strings.EqualFold(req.Method(), method)
}

// IsGet Is this a GET method request?
func (req *AsanaRequest) IsGet() bool {
	return req.Is("GET")
}

// IsPost Is this a POST method request?
func (req *AsanaRequest) IsPost() bool {
	return req.Is("POST")
}

// IsHead Is this a Head method request?
func (req *AsanaRequest) IsHead() bool {
	return req.Is("HEAD")
}

// IsOptions Is this a OPTIONS method request?
func (req *AsanaRequest) IsOptions() bool {
	return req.Is("OPTIONS")
}

// IsPut Is this a PUT method request?
func (req *AsanaRequest) IsPut() bool {
	return req.Is("PUT")
}

// IsDelete Is this a DELETE method request?
func (req *AsanaRequest) IsDelete() bool {
	return req.Is("DELETE")
}

// IsPatch Is this a PATCH method request?
func (req *AsanaRequest) IsPatch() bool {
	return req.Is("PATCH")
}

// IsAjax returns boolean of this request is generated by ajax.
func (req *AsanaRequest) IsAjax() bool {
	return strings.EqualFold(req.Header(HeaderXRequestedWith), "XMLHttpRequest")
}

// IsSecure returns boolean of this request is in https.
func (req *AsanaRequest) IsSecure() bool {
	return strings.EqualFold(req.Scheme(), "https")
}

// IsWebsocket returns boolean of this request is in webSocket.
func (req *AsanaRequest) IsWebsocket() bool {
	return strings.EqualFold(req.Header("Upgrade"), "websocket")
}

// IsUpload returns boolean of whether file uploads in this request or not..
func (req *AsanaRequest) IsUpload() bool {
	return someAccept(req.Header(HeaderContentType), "multipart/form-data")
}

// AcceptsHTML Checks if request accepts html response
func (req *AsanaRequest) Accepts(contentTypes ...string) bool {
	return someAccept(req.Header(HeaderAccept), contentTypes...)
}

// AcceptsHTML Checks if request accepts html response
func (req *AsanaRequest) AcceptsHTML() bool {
	return req.Accepts(ApplicationHTML, TextHTML)
}

// AcceptsTextPlain Checks if request accepts txt response
func (req *AsanaRequest) AcceptsTextPlain() bool {
	return req.Accepts(TextPlain)
}

// AcceptsMSGPack Checks if request accepts MSGPack response
func (req *AsanaRequest) AcceptsMSGPack() bool {
	return req.Accepts(ApplicationMSGPack)
}

// AcceptsXML Checks if request accepts xml response
func (req *AsanaRequest) AcceptsXML() bool {
	return req.Accepts(ApplicationXML, TextXML)
}

// AcceptsJSON Checks if request accepts json response
func (req *AsanaRequest) AcceptsJSON() bool {
	return req.Accepts(ApplicationJSON)
}

// AcceptsMSGPACK Checks if request accepts msgpack response
func (req *AsanaRequest) AcceptsMSGPACK() bool {
	return req.Accepts(ApplicationMSGPack)
}

// AcceptsJSONP Checks if request accepts jsonp response
func (req *AsanaRequest) AcceptsJSONP() bool {
	return req.Accepts(ApplicationJSONP)
}

// AcceptsYAML Checks if request accepts yaml response
func (req *AsanaRequest) AcceptsYAML() bool {
	return req.Accepts(ApplicationYAML)
}

// AcceptsProtoBuf Checks if request accepts protobuf response
func (req *AsanaRequest) AcceptsProtoBuf() bool {
	return req.Accepts(ApplicationProtoBuf)
}

// Check if some of types is accepted by head
func someAccept(acceptHead string, acceptedTypes ...string) bool {
	for _, acceptedType := range acceptedTypes {
		if strings.EqualFold(acceptHead, "*/*") || strings.Contains(strings.ToLower(acceptHead), strings.ToLower(acceptedType)) {
			return true
		}
	}

	return false
}

// IP returns request client ip.
// if in proxy, return first proxy id.
// if error, return RemoteAddr.
func (req *AsanaRequest) IP() string {
	ips := req.Proxy()
	if len(ips) > 0 && ips[0] != "" {
		rip, _, err := net.SplitHostPort(ips[0])
		if err != nil {
			rip = ips[0]
		}
		return rip
	}
	if ip, _, err := net.SplitHostPort(req.Context.HTTPRequest.RemoteAddr); err == nil {
		return ip
	}
	return req.Context.HTTPRequest.RemoteAddr
}

// Proxy returns proxy client ips slice.
func (req *AsanaRequest) Proxy() []string {
	if ips := req.Header(HeaderXForwardedFor); ips != "" {
		return strings.Split(ips, ",")
	}
	return []string{}
}

// Referer returns http referer header.
func (req *AsanaRequest) Referer() string {
	return req.Header(HeaderReferer)
}

// Refer returns http referer header.
func (req *AsanaRequest) Refer() string {
	return req.Referer()
}

// SubDomains returns sub domain string.
// if aa.bb.domain.com, returns aa.bb .
func (req *AsanaRequest) SubDomains() string {
	parts := strings.Split(req.Host(), ".")
	if len(parts) >= 3 {
		return strings.Join(parts[:len(parts)-2], ".")
	}
	return ""
}

// Port returns request client port.
// when error or empty, return 80.
func (req *AsanaRequest) Port() int {
	if _, portPart, err := net.SplitHostPort(req.Context.HTTPRequest.Host); err == nil {
		port, _ := strconv.Atoi(portPart)
		return port
	}
	return 80
}

// UserAgent returns request client user agent string.
func (req *AsanaRequest) UserAgent() string {
	return req.Header(HeaderUserAgent)
}

// ParamsLen return the length of the params
func (req *AsanaRequest) ParamsLen() int {
	return len(req.pNames)
}

// Param returns router param by a given key.
func (req *AsanaRequest) Param(key string) string {
	for i, v := range req.pNames {
		if v == key && i <= len(req.pValues) {
			return req.pValues[i]
		}
	}
	return ""
}

// Params returns the map[key]value.
func (req *AsanaRequest) Params() map[string]string {
	m := make(map[string]string)
	for i, v := range req.pNames {
		if i <= len(req.pValues) {
			m[v] = req.pValues[i]
		}
	}
	return m
}

// SetParam will set the param with key and value
func (req *AsanaRequest) SetParam(key, val string) {
	// check if already exists
	for i, v := range req.pNames {
		if v == key && i <= len(req.pValues) {
			req.pValues[i] = val
			return
		}
	}
	req.pValues = append(req.pValues, val)
	req.pNames = append(req.pNames, key)
}

// ResetParams clears any of the input's Params
// This function is used to clear parameters so they may be reset between filter
// passes.
func (req *AsanaRequest) ResetParams() Request {
	req.pNames = req.pNames[:0]
	req.pValues = req.pValues[:0]
	return req
}

// Query returns input data item string by a given string.
func (req *AsanaRequest) Query(key string) string {
	if val := req.Param(key); val != "" {
		return val
	}
	if req.Context.HTTPRequest.Form == nil {
		req.dataLock.Lock()
		if req.Context.HTTPRequest.Form == nil {
			req.Context.HTTPRequest.ParseForm()
		}
		req.dataLock.Unlock()
	}
	req.dataLock.RLock()
	defer req.dataLock.RUnlock()
	return req.Context.HTTPRequest.Form.Get(key)
}

// Header returns request header item string by a given string.
// if non-existed, return empty string.
func (req *AsanaRequest) Header(key string) string {
	return req.Context.HTTPRequest.Header.Get(key)
}

// Cookie returns request cookie item string by a given key.
// if non-existed, return empty string.
func (req *AsanaRequest) Cookie(key string) string {
	ck, err := req.Context.HTTPRequest.Cookie(key)
	if err != nil {
		return ""
	}
	return ck.Value
}

// Session returns current session item value by a given key.
// if non-existed, return nil.
func (req *AsanaRequest) Session(key interface{}) interface{} {
	return req.CruSession.Get(key)
}

// CopyBody returns the raw request body data as bytes.
func (req *AsanaRequest) CopyBody(MaxMemory int64) []byte {
	if req.Context.HTTPRequest.Body == nil {
		return []byte{}
	}

	var requestBody []byte
	safe := &io.LimitedReader{R: req.Context.HTTPRequest.Body, N: MaxMemory}
	if strings.EqualFold(req.Header(HeaderContentEncoding), "gzip") {
		reader, err := gzip.NewReader(safe)
		if err != nil {
			return nil
		}
		requestBody, _ = ioutil.ReadAll(reader)
	} else if strings.EqualFold(req.Header(HeaderContentEncoding), "brotli") {
		reader := brotli.NewReader(safe)
		requestBody, _ = ioutil.ReadAll(reader)
	} else {
		requestBody, _ = ioutil.ReadAll(safe)
	}

	req.Context.HTTPRequest.Body.Close()
	bf := bytes.NewBuffer(requestBody)
	req.Context.HTTPRequest.Body = http.MaxBytesReader(req.Context.ResponseWriter, ioutil.NopCloser(bf), MaxMemory)
	req.RequestBody = requestBody
	return requestBody
}

// data return the implicit data in the input
func (req *AsanaRequest) Data() map[interface{}]interface{} {
	req.dataLock.Lock()
	defer req.dataLock.Unlock()
	if req.data == nil {
		req.data = make(map[interface{}]interface{})
	}
	return req.data
}

func (req *AsanaRequest) setData(data map[interface{}]interface{}) {
	req.dataLock.Lock()
	defer req.dataLock.Unlock()
	req.data = data
}

// GetFlash returns the stored data in this context.
func (req *AsanaRequest) GetFlash(key interface{}) interface{} {
	req.dataLock.Lock()
	defer req.dataLock.Unlock()
	if v, ok := req.data[key]; ok {
		return v
	}
	return nil
}

// SetFlash stores data with given key in this context.
// This data are only available in this context.
func (req *AsanaRequest) SetFlash(key, val interface{}) {
	req.dataLock.Lock()
	defer req.dataLock.Unlock()
	if req.data == nil {
		req.data = make(map[interface{}]interface{})
	}
	req.data[key] = val
}

// ParseFormOrMultiForm parseForm or parseMultiForm based on Content-type
func (req *AsanaRequest) ParseFormOrMultiForm(maxMemory int64) error {
	// Parse the body depending on the content type.
	if strings.Contains(req.Header(HeaderContentType), "multipart/form-data") {
		if err := req.Context.HTTPRequest.ParseMultipartForm(maxMemory); err != nil {
			return errors.New("Error parsing req body:" + err.Error())
		}
	} else if err := req.Context.HTTPRequest.ParseForm(); err != nil {
		return errors.New("Error parsing req body:" + err.Error())
	}
	return nil
}

// BindForm data from request.Form[key] to dest
// like /?id=123&isok=true&ft=1.2&ol[0]=1&ol[1]=2&ul[]=str&ul[]=array&user.Name=asana
// var id int  asanaInput.BindForm(&id, "id")  id ==123
// var isok bool  asanaInput.BindForm(&isok, "isok")  isok ==true
// var ft float64  asanaInput.BindForm(&ft, "ft")  ft ==1.2
// ol := make([]int, 0, 2)  asanaInput.BindForm(&ol, "ol")  ol ==[1 2]
// ul := make([]string, 0, 2)  asanaInput.BindForm(&ul, "ul")  ul ==[str array]
// user struct{Name}  asanaInput.BindForm(&user, "user")  user == {Name:"asana"}
func (req *AsanaRequest) BindForm(dest interface{}, key string) error {
	value := reflect.ValueOf(dest)
	if value.Kind() != reflect.Ptr {
		return errors.New("asana: non-pointer passed to Bind: " + key)
	}
	value = value.Elem()
	if !value.CanSet() {
		return errors.New("asana: non-settable variable passed to Bind: " + key)
	}
	typ := value.Type()
	// Get real type if dest define with interface{}.
	// e.g  var dest interface{} dest=1.0
	if value.Kind() == reflect.Interface {
		typ = value.Elem().Type()
	}
	rv := req.bind(key, typ)
	if !rv.IsValid() {
		return errors.New("asana: reflect value is empty")
	}
	value.Set(rv)
	return nil
}

func (req *AsanaRequest) bind(key string, typ reflect.Type) reflect.Value {
	if req.Context.HTTPRequest.Form == nil {
		req.Context.HTTPRequest.ParseForm()
	}
	rv := reflect.Zero(typ)
	switch typ.Kind() {
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		val := req.Query(key)
		if len(val) == 0 {
			return rv
		}
		rv = req.bindInt(val, typ)
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		val := req.Query(key)
		if len(val) == 0 {
			return rv
		}
		rv = req.bindUint(val, typ)
	case reflect.Float32, reflect.Float64:
		val := req.Query(key)
		if len(val) == 0 {
			return rv
		}
		rv = req.bindFloat(val, typ)
	case reflect.String:
		val := req.Query(key)
		if len(val) == 0 {
			return rv
		}
		rv = req.bindString(val, typ)
	case reflect.Bool:
		val := req.Query(key)
		if len(val) == 0 {
			return rv
		}
		rv = req.bindBool(val, typ)
	case reflect.Slice:
		rv = req.bindSlice(&req.Context.HTTPRequest.Form, key, typ)
	case reflect.Struct:
		rv = req.bindStruct(&req.Context.HTTPRequest.Form, key, typ)
	case reflect.Ptr:
		rv = req.bindPoint(key, typ)
	case reflect.Map:
		rv = req.bindMap(&req.Context.HTTPRequest.Form, key, typ)
	}
	return rv
}

func (req *AsanaRequest) bindValue(val string, typ reflect.Type) reflect.Value {
	rv := reflect.Zero(typ)
	switch typ.Kind() {
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		rv = req.bindInt(val, typ)
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		rv = req.bindUint(val, typ)
	case reflect.Float32, reflect.Float64:
		rv = req.bindFloat(val, typ)
	case reflect.String:
		rv = req.bindString(val, typ)
	case reflect.Bool:
		rv = req.bindBool(val, typ)
	case reflect.Slice:
		rv = req.bindSlice(&url.Values{"": {val}}, "", typ)
	case reflect.Struct:
		rv = req.bindStruct(&url.Values{"": {val}}, "", typ)
	case reflect.Ptr:
		rv = req.bindPoint(val, typ)
	case reflect.Map:
		rv = req.bindMap(&url.Values{"": {val}}, "", typ)
	}
	return rv
}

func (req *AsanaRequest) bindInt(val string, typ reflect.Type) reflect.Value {
	intValue, err := strconv.ParseInt(val, 10, 64)
	if err != nil {
		return reflect.Zero(typ)
	}
	pValue := reflect.New(typ)
	pValue.Elem().SetInt(intValue)
	return pValue.Elem()
}

func (req *AsanaRequest) bindUint(val string, typ reflect.Type) reflect.Value {
	uintValue, err := strconv.ParseUint(val, 10, 64)
	if err != nil {
		return reflect.Zero(typ)
	}
	pValue := reflect.New(typ)
	pValue.Elem().SetUint(uintValue)
	return pValue.Elem()
}

func (req *AsanaRequest) bindFloat(val string, typ reflect.Type) reflect.Value {
	floatValue, err := strconv.ParseFloat(val, 64)
	if err != nil {
		return reflect.Zero(typ)
	}
	pValue := reflect.New(typ)
	pValue.Elem().SetFloat(floatValue)
	return pValue.Elem()
}

func (req *AsanaRequest) bindString(val string, typ reflect.Type) reflect.Value {
	return reflect.ValueOf(val)
}

func (req *AsanaRequest) bindBool(val string, typ reflect.Type) reflect.Value {
	val = strings.TrimSpace(strings.ToLower(val))
	switch val {
	case "true", "on", "1":
		return reflect.ValueOf(true)
	}
	return reflect.ValueOf(false)
}

type sliceValue struct {
	index int           // Index extracted from brackets.  If -1, no index was provided.
	value reflect.Value // the bound value for this slice element.
}

func (req *AsanaRequest) bindSlice(params *url.Values, key string, typ reflect.Type) reflect.Value {
	maxIndex := -1
	numNoIndex := 0
	sliceValues := []sliceValue{}
	for reqKey, vals := range *params {
		if !strings.HasPrefix(reqKey, key+"[") {
			continue
		}
		// Extract the index, and the index where a sub-key starts. (e.g. field[0].subkey)
		index := -1
		leftBracket, rightBracket := len(key), strings.Index(reqKey[len(key):], "]")+len(key)
		if rightBracket > leftBracket+1 {
			index, _ = strconv.Atoi(reqKey[leftBracket+1 : rightBracket])
		}
		subKeyIndex := rightBracket + 1

		// Handle the indexed case.
		if index > -1 {
			if index > maxIndex {
				maxIndex = index
			}
			sliceValues = append(sliceValues, sliceValue{
				index: index,
				value: req.bind(reqKey[:subKeyIndex], typ.Elem()),
			})
			continue
		}

		// It's an un-indexed element.  (e.g. element[])
		numNoIndex += len(vals)
		for _, val := range vals {
			// Unindexed values can only be direct-bound.
			sliceValues = append(sliceValues, sliceValue{
				index: -1,
				value: req.bindValue(val, typ.Elem()),
			})
		}
	}
	resultArray := reflect.MakeSlice(typ, maxIndex+1, maxIndex+1+numNoIndex)
	for _, sv := range sliceValues {
		if sv.index != -1 {
			resultArray.Index(sv.index).Set(sv.value)
		} else {
			resultArray = reflect.Append(resultArray, sv.value)
		}
	}
	return resultArray
}

func (req *AsanaRequest) bindStruct(params *url.Values, key string, typ reflect.Type) reflect.Value {
	result := reflect.New(typ).Elem()
	fieldValues := make(map[string]reflect.Value)
	for reqKey, val := range *params {
		var fieldName string
		if strings.HasPrefix(reqKey, key+".") {
			fieldName = reqKey[len(key)+1:]
		} else if strings.HasPrefix(reqKey, key+"[") && reqKey[len(reqKey)-1] == ']' {
			fieldName = reqKey[len(key)+1 : len(reqKey)-1]
		} else {
			continue
		}

		if _, ok := fieldValues[fieldName]; !ok {
			// Time to bind this field.  Get it and make sure we can set it.
			fieldValue := result.FieldByName(fieldName)
			if !fieldValue.IsValid() {
				continue
			}
			if !fieldValue.CanSet() {
				continue
			}
			boundVal := req.bindValue(val[0], fieldValue.Type())
			fieldValue.Set(boundVal)
			fieldValues[fieldName] = boundVal
		}
	}

	return result
}

func (req *AsanaRequest) bindPoint(key string, typ reflect.Type) reflect.Value {
	return req.bind(key, typ.Elem()).Addr()
}

func (req *AsanaRequest) bindMap(params *url.Values, key string, typ reflect.Type) reflect.Value {
	var (
		result    = reflect.MakeMap(typ)
		keyType   = typ.Key()
		valueType = typ.Elem()
	)
	for paramName, values := range *params {
		if !strings.HasPrefix(paramName, key+"[") || paramName[len(paramName)-1] != ']' {
			continue
		}

		key := paramName[len(key)+1 : len(paramName)-1]
		result.SetMapIndex(req.bindValue(key, keyType), req.bindValue(values[0], valueType))
	}
	return result
}
